<style>
    /* Always set the map height explicitly to define the size of the div
 * element that contains the map. */

    #map {
        height: 100%;
    }

    /* Optional: Makes the sample page fill the window. */

    html,
    body {
        height: 100%;
        margin: 0;
        padding: 0;
    }
</style>
<div id="map"></div>
<script src="https://code.jquery.com/jquery-3.2.1.min.js" integrity="sha256-hwg4gsxgFZhOsEEamdOYGBf13FyQuiTwlAQgxVSNgt4="
    crossorigin="anonymous"></script>
<script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCfu5BP0TA-5ea9ULJJeV4Kqkw2XxfGz9g&callback=initMap">
</script>

<script>

    var map;

    function initMap() {

        var deviceId = getParameterByName('deviceId', undefined); // '358022066432461';

        map = new google.maps.Map(document.getElementById('map'), {
            zoom: 13,
            center: { lat: -33.9249, lng: 18.4241 },
            mapTypeId: 'terrain'
        });

        $.get(`/location/listSessions?deviceId=${deviceId}`, function (data) {
            handleSessions(deviceId, data);
        });
    }

    function handleSessions(deviceId, sessions) {
        for (var session of sessions) {
            $.get(`/location/list?deviceId=${deviceId}&startTimestamp=${session[0]}&endTimestamp=${session[1]}`, function (data) {
                handleLocations(deviceId, data);
            });
        }
    }

    function handleLocations(deviceId, locations) {

        var previousLocation = null;
        for (const location of locations) {
            if (!previousLocation) {
                previousLocation = location;
                continue;
            }

            var color = pickHex([255, 0, 0], [0, 255, 0], location.speed / 44);

            var path = new google.maps.Polyline({
                path: [
                    { lat: previousLocation.latitude, lng: previousLocation.longitude },
                    { lat: location.latitude, lng: location.longitude },
                ],
                geodesic: true,
                strokeColor: rgbToHex(color[0], color[1], color[2]),
                strokeOpacity: 1.0,
                strokeWeight: 2
            });

            path.setMap(map);

            previousLocation = location;
        }
    }

    function pickHex(color1, color2, weight) {
        var w1 = weight;
        var w2 = 1 - w1;
        var rgb = [Math.round(color1[0] * w1 + color2[0] * w2),
        Math.round(color1[1] * w1 + color2[1] * w2),
        Math.round(color1[2] * w1 + color2[2] * w2)];
        return rgb;
    }

    function componentToHex(c) {
        var hex = c.toString(16);
        return hex.length == 1 ? "0" + hex : hex;
    }


    function rgbToHex(r, g, b) {
        return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b);
    }

    function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, "\\$&");
        var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, " "));
    }
</script>